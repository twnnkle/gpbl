---
import './_index.scss';

import { Image } from 'astro:assets';

const images = [
  'https://images.placeholders.dev/?width=126&height=71&text=+&bgColor=%23FF7F50',
  'https://images.placeholders.dev/?width=126&height=71&text=+&bgColor=%235F9EA0',
  'https://images.placeholders.dev/?width=126&height=71&text=+&bgColor=%23FFFACD',
  'https://images.placeholders.dev/?width=126&height=71&text=+&bgColor=%23005555',
  'https://images.placeholders.dev/?width=126&height=71&text=+&bgColor=%23FF1234',
  'https://images.placeholders.dev/?width=126&height=71&text=+&bgColor=%23FF69B4',
  'https://images.placeholders.dev/?width=126&height=71&text=+&bgColor=%2320B2AA',
  'https://images.placeholders.dev/?width=126&height=71&text=+&bgColor=%23DA70D6',
  'https://images.placeholders.dev/?width=126&height=71&text=+&bgColor=%23000000',
];
---

<div class="advertisement-carousel">
  <div class="advertisement-carousel-main">
    <div class="main-nav-btn-wrapper main-nav-btn-wrapper_prev">
      <button class="main-nav-btn main-nav-btn_prev" type="button">
        <svg
          width="16"
          height="14"
          viewBox="0 0 16 14"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M0 7.00004C0 6.73483 0.105357 6.48047 0.292893 6.29294C0.48043 6.1054 0.734784 6.00004 1 6.00004H12.586L8.292 1.70804C8.10423 1.52027 7.99874 1.26559 7.99874 1.00004C7.99874 0.734491 8.10423 0.479816 8.292 0.292043C8.47977 0.104269 8.73445 -0.0012207 9 -0.0012207C9.26555 -0.0012207 9.52023 0.104269 9.708 0.292043L15.708 6.29204C15.8011 6.38493 15.875 6.49529 15.9254 6.61678C15.9758 6.73827 16.0018 6.86851 16.0018 7.00004C16.0018 7.13158 15.9758 7.26182 15.9254 7.38331C15.875 7.5048 15.8011 7.61515 15.708 7.70804L9.708 13.708C9.52023 13.8958 9.26555 14.0013 9 14.0013C8.73445 14.0013 8.47977 13.8958 8.292 13.708C8.10423 13.5203 7.99874 13.2656 7.99874 13C7.99874 12.7345 8.10423 12.4798 8.292 12.292L12.586 8.00004H1C0.734784 8.00004 0.48043 7.89469 0.292893 7.70715C0.105357 7.51961 0 7.26526 0 7.00004Z"
            fill="white"></path>
        </svg>
      </button>
    </div>

    <Image
      class="advertisement-carousel-active-img"
      src={images[0]}
      width="636"
      height="357"
      alt="Активная картинка слайдера"
    />
    <div class="main-nav-btn-wrapper main-nav-btn-wrapper_next">
      <button class="main-nav-btn main-nav-btn_next" type="button">
        <svg
          width="16"
          height="14"
          viewBox="0 0 16 14"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M0 7.00004C0 6.73483 0.105357 6.48047 0.292893 6.29294C0.48043 6.1054 0.734784 6.00004 1 6.00004H12.586L8.292 1.70804C8.10423 1.52027 7.99874 1.26559 7.99874 1.00004C7.99874 0.734491 8.10423 0.479816 8.292 0.292043C8.47977 0.104269 8.73445 -0.0012207 9 -0.0012207C9.26555 -0.0012207 9.52023 0.104269 9.708 0.292043L15.708 6.29204C15.8011 6.38493 15.875 6.49529 15.9254 6.61678C15.9758 6.73827 16.0018 6.86851 16.0018 7.00004C16.0018 7.13158 15.9758 7.26182 15.9254 7.38331C15.875 7.5048 15.8011 7.61515 15.708 7.70804L9.708 13.708C9.52023 13.8958 9.26555 14.0013 9 14.0013C8.73445 14.0013 8.47977 13.8958 8.292 13.708C8.10423 13.5203 7.99874 13.2656 7.99874 13C7.99874 12.7345 8.10423 12.4798 8.292 12.292L12.586 8.00004H1C0.734784 8.00004 0.48043 7.89469 0.292893 7.70715C0.105357 7.51961 0 7.26526 0 7.00004Z"
            fill="white"></path>
        </svg>
      </button>
    </div>
  </div>

  <div class="advertisement-carousel-items">
    <div class="carousel-inner">
      <div class="carousel-item active">
        <div class="row flex-nowrap carousel-track">
          {
            images.map((image, index) => (
              <div class="col-2">
                <Image
                  class={index === 0 ? 'active' : ''}
                  src={image}
                  width="636"
                  height="357"
                  alt="Картинка слайдера"
                  data-index={index}
                />
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Получаем основные элементы карусели
  const mainImage = document.querySelector(
    '.advertisement-carousel-active-img'
  ) as HTMLImageElement;
  const thumbs = document.querySelectorAll(
    '.advertisement-carousel-items img'
  ) as NodeListOf<HTMLImageElement>;
  const prevMainBtn = document.querySelector('.main-nav-btn-wrapper_prev');
  const nextMainBtn = document.querySelector('.main-nav-btn-wrapper_next');
  const carouselTrack = document.querySelector(
    '.carousel-track'
  ) as HTMLElement;

  let currentIndex = 0;

  // Функция обновления активного изображения и состояния карусели
  function updateActiveImage(index) {
    // Обновляем текущий индекс
    currentIndex = index;
    // Устанавливаем основное изображение
    mainImage.src = thumbs[index].src;

    // Обновляем стили миниатюр
    thumbs.forEach((thumb) => thumb.classList.remove('active'));
    thumbs[index].classList.add('active');
    thumbs[index].style.border = '2px solid #487cfb';
    thumbs.forEach((thumb, i) => {
      if (i !== index) {
        thumb.style.border = 'none';
      }
    });

    // Вычисляем параметры для прокрутки карусели
    const thumbWidth = thumbs[0].parentElement.offsetWidth;
    const containerWidth = carouselTrack.parentElement.offsetWidth;
    const visibleThumbs = Math.floor(containerWidth / thumbWidth);
    const maxOffset = (thumbs.length - visibleThumbs) * thumbWidth;

    let offset;

    // Определяем смещение карусели в зависимости от позиции активной миниатюры
    if (index <= Math.floor(visibleThumbs / 2)) {
      offset = 0;
    } else if (index >= thumbs.length - Math.floor(visibleThumbs / 2)) {
      offset = maxOffset;
    } else {
      offset = (index - Math.floor(visibleThumbs / 2)) * thumbWidth;
    }

    // Применяем трансформацию для плавной прокрутки
    carouselTrack.style.transform = `translateX(-${Math.max(0, Math.min(offset, maxOffset))}px)`;
    carouselTrack.style.transition = 'transform 0.3s ease-in-out';
  }

  // Обработчик клика по кнопке "Предыдущий"
  prevMainBtn.addEventListener('click', () => {
    currentIndex = currentIndex > 0 ? currentIndex - 1 : thumbs.length - 1;
    updateActiveImage(currentIndex);
  });

  // Обработчик клика по кнопке "Следующий"
  nextMainBtn.addEventListener('click', () => {
    currentIndex = currentIndex < thumbs.length - 1 ? currentIndex + 1 : 0;
    updateActiveImage(currentIndex);
  });

  // Добавляем обработчики клика на миниатюры
  thumbs.forEach((thumb, index) => {
    thumb.addEventListener('click', () => {
      updateActiveImage(index);
    });
  });

  // Инициализация карусели
  updateActiveImage(0);
</script>
